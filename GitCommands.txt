git config --global user.name “[firstname lastname]”
git config --global user.email “[valid-email]”
git config --global color.ui auto



git init
git clone <URL>
git diff
git diff --staged
git commit -m "Message"
git reset
git add <File Name>
git status


git branch
list your branches. a * will appear next to the currently active branch

git branch [branch-name]
create a new branch at the current commit

git checkout /git switch
switch to another branch and check it out into your working directory

git merge [branch]
merge the specified branch’s history into the current one

git log
show all commits in the current branch’s history

git log
show the commit history for the currently active branch

git log branchB..branchA
show the commits on branchA that are not on branch

git log --follow [file]
show the commits that changed file, even across renames

git diff branchB...branchA
show the diff of what is in branchA that is not in branch

git show [SHA]
show any object in Git in human-readable format

git remote add [alias] [url]
add a git URL as an alias

git fetch [alias]
fetch down all the branches from that Git remote

git merge [alias]/[branch]
merge a remote branch into your current branch to bring it up to date

git push [alias] [branch]
Transmit local branch commits to the remote repository branch

git pull
fetch and merge any commits from the tracking remote branch

git rm [file]
delete the file from project and stage the removal for commit

git mv [existing-path] [new-path]
change an existing file path and stage the move

git log --stat -M
show all commit logs with indication of any paths that moved

REWRITE HISTORY
Rewriting branches, updating commits and clearing history

git rebase [branch]
apply any commits of current branch ahead of specified one

git reset --hard [commit]
clear staging area, rewrite working tree from specified commit


